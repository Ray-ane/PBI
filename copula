/**
 * Power BI Custom Visual for Copula Modeling
 * This visual analyzes the joint distribution of two bond error series
 * using t-copula modeling to capture their dependence structure.
 */

"use strict";
import "./../style/visual.less";
import * as d3 from "d3";
import powerbiVisualsApi from "powerbi-visuals-api";
import IVisual = powerbiVisualsApi.extensibility.visual.IVisual;
import VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbiVisualsApi.extensibility.visual.VisualUpdateOptions;
import DataView = powerbiVisualsApi.DataView;

// Constants
const CHART_MARGINS = { top: 20, right: 20, bottom: 40, left: 40 };

/**
 * Interface representing a single row of input data
 */
interface DataRow {
    inputdate: Date;
    context1: string;
    isin1: string;
    isin2: string;
    bond1: string;
    bond2: string;
    error: number;
}

/**
 * Interface for bond error data points
 */
interface BondErrorPoint {
    date: Date;
    bond1Error: number;
    bond2Error: number;
}

/**
 * Interface for copula parameters
 */
interface CopulaParams {
    rho: number;        // Correlation parameter
    df: number;         // Degrees of freedom for t-copula
    u1: number[];       // Marginal probabilities for Bond1
    u2: number[];       // Marginal probabilities for Bond2
}

/**
 * Power BI Custom Visual for Copula Modeling
 */
export class Visual implements IVisual {
    // DOM Elements
    private target: HTMLElement;
    private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;
    private dropdownPairs: HTMLSelectElement;

    // Data Storage
    private allData: DataRow[] = [];
    private copulaModel: CopulaModel;

    // Viewport Configuration
    private currentViewport: { width: number; height: number } = { width: 600, height: 300 };

    constructor(options: VisualConstructorOptions) {
        this.initializeVisual(options);
        this.copulaModel = new CopulaModel();
    }

    /**
     * Initializes the visual with controls and event listeners
     */
    private initializeVisual(options: VisualConstructorOptions): void {
        this.target = options.element;
        this.target.innerHTML = "";

        this.createControlContainer();
        this.createTooltip();
        this.initializeControls();
        this.createSVGContainer();
    }

    /**
     * Creates the tooltip element
     */
    private createTooltip(): void {
        const tooltip = document.createElement("div");
        tooltip.id = "tooltip";
        tooltip.style.position = "absolute";
        tooltip.style.padding = "8px";
        tooltip.style.background = "rgba(255, 255, 255, 0.9)";
        tooltip.style.border = "1px solid #ddd";
        tooltip.style.borderRadius = "4px";
        tooltip.style.pointerEvents = "none";
        tooltip.style.fontSize = "12px";
        tooltip.style.zIndex = "1000";
        this.target.appendChild(tooltip);
    }

    /**
     * Creates the control container with dropdown
     */
    private createControlContainer(): void {
        const controlContainer = document.createElement("div");
        controlContainer.id = "control-container";
        controlContainer.innerHTML = `
            <div id="dropdown-container">
                <label for="pairDropdown">Select Pair (Bond1 vs Bond2):</label>
                <select id="pairDropdown" style="font-size: 10px;"></select>
            </div>
        `;
        this.target.appendChild(controlContainer);
    }

    /**
     * Initializes control elements and event listeners
     */
    private initializeControls(): void {
        this.dropdownPairs = document.getElementById("pairDropdown") as HTMLSelectElement;
        this.dropdownPairs.addEventListener("change", () => this.updateChartsInner());
    }

    /**
     * Creates the SVG container for the chart
     */
    private createSVGContainer(): void {
        this.svg = d3.select(this.target)
            .append("svg")
            .classed("copula-visual", true);
    }

    /**
     * Parses a single row of data with validation
     */
    private parseDataRow(row: any[]): DataRow | null {
        let dateVal: Date;
        if (row[0] instanceof Date) {
            dateVal = row[0];
        } else if (typeof row[0] === 'string') {
            dateVal = new Date(row[0]);
            if (isNaN(dateVal.getTime())) return null;
        } else if (typeof row[0] === 'number') {
            dateVal = new Date(row[0]);
        } else {
            return null;
        }

        return {
            inputdate: dateVal,
            context1: row[1]?.toString() || "",
            isin1: row[2]?.toString() || "",
            isin2: row[3]?.toString() || "",
            bond1: row[4]?.toString() || "",
            bond2: row[5]?.toString() || "",
            error: +row[6]
        };
    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews?.[0];
        if (!dataView?.table) return;
        
        this.currentViewport = options.viewport || { width: 600, height: 300 };

        const rows = dataView.table.rows;
        if (!rows?.length) return;

        // Parse and sort data
        this.allData = rows
            .map(row => this.parseDataRow(row))
            .filter((row): row is DataRow => row !== null)
            .sort((a, b) => a.inputdate.getTime() - b.inputdate.getTime());

        // Update dropdown with latest P_VALUE rows
        this.updateDropdown();
        
        // Update chart if data is available
        if (this.allData.length > 0) {
            this.updateChartsInner();
        }
    }

    /**
     * Updates the dropdown with the latest P_VALUE rows
     */
    private updateDropdown(): void {
        const pValueRows = this.allData.filter(d => 
            d.context1.trim().toUpperCase() === "P_VALUE"
        );

        if (pValueRows.length === 0) {
            this.dropdownPairs.options.length = 0;
            this.svg.selectAll("*").remove();
            return;
        }

        const maxDate = d3.max(pValueRows, d => d.inputdate.getTime())!;
        const latestRows = pValueRows.filter(d => 
            d.inputdate.toDateString() === new Date(maxDate).toDateString()
        );

        const uniquePairs = Array.from(new Set(
            latestRows.map(row => `${row.bond1} vs ${row.bond2}`)
        ));

        this.dropdownPairs.options.length = 0;
        uniquePairs.forEach(pair => {
            const opt = document.createElement("option");
            opt.value = pair;
            opt.text = pair;
            opt.style.fontSize = "10px";
            this.dropdownPairs.appendChild(opt);
        });

        if (uniquePairs.length > 0) {
            this.dropdownPairs.value = uniquePairs[0];
        }
    }

    private updateChartsInner() {
        if (this.dropdownPairs.options.length === 0) return;
        
        const selectedPair = this.dropdownPairs.value;
        if (!selectedPair) return;
        
        const [selectedBond1, selectedBond2] = selectedPair.split(" vs ");

        // Filter and compute error series
        const errorRows = this.allData.filter(d => 
            d.context1.trim().toUpperCase() === "ERROR"
        );

        const mapBond1 = new Map<string, number>();
        const mapBond2 = new Map<string, number>();
        
        errorRows.forEach(d => {
            const key = d.inputdate.toDateString();
            if (d.bond1.trim() === selectedBond1.trim()) {
                mapBond1.set(key, d.error);
            } else if (d.bond1.trim() === selectedBond2.trim()) {
                mapBond2.set(key, d.error);
            }
        });

        // Create bond error points
        const bondErrorPoints = Array.from(mapBond1.entries())
            .filter(([key]) => mapBond2.has(key))
            .map(([key, val1]) => ({
                date: new Date(key),
                bond1Error: val1,
                bond2Error: mapBond2.get(key)!
            }))
            .sort((a, b) => a.date.getTime() - b.date.getTime());

        if (bondErrorPoints.length < 2) {
            this.renderChart(false);
            return;
        }

        // Update copula model with new data
        this.copulaModel.setData(
            bondErrorPoints.map(d => d.bond1Error),
            bondErrorPoints.map(d => d.bond2Error),
            bondErrorPoints.map(d => d.date)
        );

        // Render chart
        this.renderChart(true);
    }

    private renderChart(hasData: boolean) {
        // Clear previous chart
        this.svg.selectAll("*").remove();

        // Set up dimensions with padding for better visibility
        const width = Math.min(this.currentViewport.width, this.currentViewport.height);
        const height = width;
        this.svg
            .attr("width", width)
            .attr("height", height)
            .style("background", "white");

        // Calculate inner dimensions
        const innerWidth = width - CHART_MARGINS.left - CHART_MARGINS.right;
        const innerHeight = height - CHART_MARGINS.top - CHART_MARGINS.bottom;

        // Create main chart group
        const g = this.svg.append("g")
            .attr("transform", `translate(${CHART_MARGINS.left}, ${CHART_MARGINS.top})`);

        // Check for data
        if (!hasData) {
            g.append("text")
                .attr("x", innerWidth / 2)
                .attr("y", innerHeight / 2)
                .attr("text-anchor", "middle")
                .attr("fill", "red")
                .style("font-size", "14px")
                .text("No data to display.");
            return;
        }

        // Create scales with padding
        const xScale = d3.scaleLinear()
            .domain([-0.05, 1.05])  // Add padding to domain
            .range([0, innerWidth]);

        const yScale = d3.scaleLinear()
            .domain([-0.05, 1.05])  // Add padding to domain
            .range([innerHeight, 0]);

        // Add grid lines
        const gridLines = g.append("g")
            .attr("class", "grid-lines")
            .style("stroke", "rgba(0, 0, 0, 0.1)")
            .style("stroke-dasharray", "2,2");

        // Add vertical grid lines
        for (let i = 0; i <= 10; i++) {
            const x = i / 10;
            gridLines.append("line")
                .attr("x1", xScale(x))
                .attr("y1", yScale(0))
                .attr("x2", xScale(x))
                .attr("y2", yScale(1));
        }

        // Add horizontal grid lines
        for (let i = 0; i <= 10; i++) {
            const y = i / 10;
            gridLines.append("line")
                .attr("x1", xScale(0))
                .attr("y1", yScale(y))
                .attr("x2", xScale(1))
                .attr("y2", yScale(y));
        }

        // Add boundary lines
        const boundaryLines = g.append("g")
            .attr("class", "boundary-lines")
            .style("stroke", "black")
            .style("stroke-width", "1.5");

        // Add boundary box
        boundaryLines.append("rect")
            .attr("x", xScale(0))
            .attr("y", yScale(1))
            .attr("width", xScale(1) - xScale(0))
            .attr("height", yScale(0) - yScale(1))
            .style("fill", "none");

        // Plot scatter points
        g.selectAll("circle")
            .data(this.copulaModel.getPoints())
            .enter()
            .append("circle")
            .attr("cx", d => xScale(d.u1))
            .attr("cy", d => yScale(d.u2))
            .attr("r", 2.5)
            .attr("fill", "#00A6FF")
            .attr("opacity", 0.7);

        // Add axes with more ticks
        const xAxis = d3.axisBottom(xScale)
            .ticks(10)
            .tickFormat(d3.format(".1f"));

        const yAxis = d3.axisLeft(yScale)
            .ticks(10)
            .tickFormat(d3.format(".1f"));

        // Add x-axis
        g.append("g")
            .attr("transform", `translate(0, ${yScale(0)})`)
            .call(xAxis)
            .selectAll("text")
            .style("font-size", "10px");

        // Add y-axis
        g.append("g")
            .attr("transform", `translate(${xScale(0)}, 0)`)
            .call(yAxis)
            .selectAll("text")
            .style("font-size", "10px");

        // Add axis labels
        g.append("text")
            .attr("x", innerWidth / 2)
            .attr("y", innerHeight + 30)
            .attr("text-anchor", "middle")
            .style("font-size", "12px")
            .text("Bond1 Error (U1)");

        g.append("text")
            .attr("transform", "rotate(-90)")
            .attr("x", -innerHeight / 2)
            .attr("y", -30)
            .attr("text-anchor", "middle")
            .style("font-size", "12px")
            .text("Bond2 Error (U2)");

        // Add correlation info
        g.append("text")
            .attr("x", innerWidth - 10)
            .attr("y", -10)
            .attr("text-anchor", "end")
            .style("font-size", "12px")
            .text(`ρ = ${this.copulaModel.getCorrelation().toFixed(3)}`);
    }
}

/**
 * Class for copula modeling and visualization
 */
class CopulaModel {
    private data: BondErrorPoint[] = [];
    private params: CopulaParams;
    private margin: { top: number; right: number; bottom: number; left: number } = CHART_MARGINS;

    constructor() {
        this.params = {
            rho: 0,
            df: 5,
            u1: [],
            u2: []
        };
    }

    /**
     * Gets the current correlation parameter
     */
    public getCorrelation(): number {
        return this.params.rho;
    }

    /**
     * Sets the bond error data and computes marginal probabilities
     */
    public setData(bond1Errors: number[], bond2Errors: number[], dates: Date[]): void {
        if (bond1Errors.length !== bond2Errors.length) {
            throw new Error("Bond error arrays must have the same length");
        }

        // Create data points
        this.data = dates.map((date, i) => ({
            date,
            bond1Error: bond1Errors[i],
            bond2Error: bond2Errors[i]
        }));

        // Compute empirical marginal distributions
        this.computeMarginals();
    }

    /**
     * Computes empirical marginal distributions using rank transformation
     */
    private computeMarginals(): void {
        const n = this.data.length;
        
        // Sort errors for rank computation
        const sortedBond1 = [...this.data].sort((a, b) => a.bond1Error - b.bond1Error);
        const sortedBond2 = [...this.data].sort((a, b) => a.bond2Error - b.bond2Error);

        // Compute ranks and convert to probabilities
        this.params.u1 = this.data.map(point => {
            const rank = sortedBond1.findIndex(d => d.bond1Error === point.bond1Error);
            const prob = (rank + 1) / (n + 1);
            if (prob < 0 || prob > 1) {
                console.error(`Invalid probability computed for Bond1: ${prob}`);
            }
            return prob;
        });

        this.params.u2 = this.data.map(point => {
            const rank = sortedBond2.findIndex(d => d.bond2Error === point.bond2Error);
            const prob = (rank + 1) / (n + 1);
            if (prob < 0 || prob > 1) {
                console.error(`Invalid probability computed for Bond2: ${prob}`);
            }
            return prob;
        });

        // Compute correlation parameter
        this.computeCorrelation();
    }

    /**
     * Computes the correlation parameter and converts to Clayton theta
     */
    private computeCorrelation(): void {
        const n = this.data.length;
        let concordant = 0;
        let discordant = 0;

        for (let i = 0; i < n; i++) {
            for (let j = i + 1; j < n; j++) {
                const x1 = this.data[i].bond1Error;
                const x2 = this.data[i].bond2Error;
                const y1 = this.data[j].bond1Error;
                const y2 = this.data[j].bond2Error;

                if ((x1 - y1) * (x2 - y2) > 0) {
                    concordant++;
                } else if ((x1 - y1) * (x2 - y2) < 0) {
                    discordant++;
                }
            }
        }

        const tau = (concordant - discordant) / (n * (n - 1) / 2);
        // Convert Kendall's tau to Clayton parameter
        this.params.rho = Math.max(tau, 0.01); // Ensure positive dependence
    }

    /**
     * Computes the Clayton copula density at given points
     */
    public computeCopulaDensity(u1: number, u2: number): number {
        try {
            // Ensure inputs are strictly between 0 and 1
            if (u1 <= 0.0000001 || u1 >= 0.9999999 || u2 <= 0.0000001 || u2 >= 0.9999999) {
                return 0;
            }

            // Get Clayton parameter (theta)
            const theta = Math.abs(this.params.rho * 20); // Scale rho to get reasonable theta values

            // Compute Clayton copula density
            const term1 = (1 + theta) * Math.pow(u1 * u2, -(1 + theta));
            const term2 = Math.pow(Math.pow(u1, -theta) + Math.pow(u2, -theta) - 1, -(2 + 1/theta));
            
            const density = term1 * term2;

            // Handle numerical instabilities
            if (!isFinite(density) || isNaN(density)) {
                return 0;
            }

            // Cap the density for visualization purposes
            return Math.min(density, 10);
        } catch (error) {
            console.error(`Error in Clayton copula density: u1=${u1}, u2=${u2}`);
            return 0;
        }
    }

    /**
     * Gets the transformed points for plotting
     */
    public getPoints(): { u1: number; u2: number }[] {
        // Return the transformed probabilities
        return this.params.u1.map((u1, i) => ({
            u1: u1,
            u2: this.params.u2[i]
        }));
    }
} 
