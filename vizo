"use strict";

import "./../style/visual.less";
import * as d3 from "d3";
import powerbiVisualsApi from "powerbi-visuals-api";
import IVisual = powerbiVisualsApi.extensibility.visual.IVisual;
import VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbiVisualsApi.extensibility.visual.VisualUpdateOptions;
import DataView = powerbiVisualsApi.DataView;

export class Visual implements IVisual {
    private target: HTMLElement;
    private dataView: DataView | undefined;

    // Store all historical data by Geo:
    private allData: { [geo: string]: { year: number; ratio: number }[] } = {};
    private geos: string[] = [];
    private selectedGeo: string | undefined;

    // Slider values (user enters % and bp; converted later)
    private sliderValues = {
        bondYield: 2,       // 10-year Bond Yield (%)
        spread: 50,         // Spread vs Bund (bp)
        inflation: 2,       // Inflation (YoY %)
        realGrowth: 2,      // Real GDP Growth (YoY %)
        primarySurplus: 0   // Primary Surplus (% of GDP)
    };

    constructor(options: VisualConstructorOptions) {
        this.target = options.element;

        // Build HTML structure:
        // 1. Dropdown for Geo selection
        // 2. Sliders for parameters
        // 3. Chart area for D3
        this.target.innerHTML = `
            <div style="display: flex; flex-direction: column; height: 100%;">
                <div style="padding: 5px;">
                    <label>Geo</label><br>
                    <select id="geoDropdown"></select>
                </div>
                <div style="display: flex; flex: 1 1 auto; border-top: 1px solid #ccc; padding: 10px;">
                    <div style="width: 200px; padding-right: 10px; border-right: 1px solid #ccc;">
                        <div style="margin-bottom: 10px;">
                            <label>10-Year Bond Yield (%)</label><br>
                            <input type="range" id="bondYield" min="-0.1" max="5" step="0.1" value="2">
                            <span id="bondYieldVal">2</span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label>Spread vs Bund (bp)</label><br>
                            <input type="range" id="spread" min="0" max="300" step="10" value="50">
                            <span id="spreadVal">50</span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label>Inflation (YoY %)</label><br>
                            <input type="range" id="inflation" min="0" max="10" step="0.1" value="2">
                            <span id="inflationVal">2</span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label>Real GDP Growth (YoY %)</label><br>
                            <input type="range" id="realGrowth" min="-5" max="10" step="0.1" value="2">
                            <span id="realGrowthVal">2</span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label>Primary Surplus (% of GDP)</label><br>
                            <input type="range" id="primarySurplus" min="-5" max="5" step="0.1" value="0">
                            <span id="primarySurplusVal">0</span>
                        </div>
                    </div>
                    <div style="flex-grow: 1; padding: 10px;">
                        <div id="d3Chart" style="width: 100%; height: 100%; position: relative;"></div>
                    </div>
                </div>
            </div>
        `;

        // Attach slider listeners
        const self = this;
        (document.getElementById("bondYield") as HTMLInputElement).addEventListener("input", function () {
            self.sliderValues.bondYield = parseFloat(this.value);
            document.getElementById("bondYieldVal")!.textContent = this.value;
            self.updateChart();
        });
        (document.getElementById("spread") as HTMLInputElement).addEventListener("input", function () {
            self.sliderValues.spread = parseFloat(this.value);
            document.getElementById("spreadVal")!.textContent = this.value;
            self.updateChart();
        });
        (document.getElementById("inflation") as HTMLInputElement).addEventListener("input", function () {
            self.sliderValues.inflation = parseFloat(this.value);
            document.getElementById("inflationVal")!.textContent = this.value;
            self.updateChart();
        });
        (document.getElementById("realGrowth") as HTMLInputElement).addEventListener("input", function () {
            self.sliderValues.realGrowth = parseFloat(this.value);
            document.getElementById("realGrowthVal")!.textContent = this.value;
            self.updateChart();
        });
        (document.getElementById("primarySurplus") as HTMLInputElement).addEventListener("input", function () {
            self.sliderValues.primarySurplus = parseFloat(this.value);
            document.getElementById("primarySurplusVal")!.textContent = this.value;
            self.updateChart();
        });

        // Attach Geo dropdown listener
        (document.getElementById("geoDropdown") as HTMLSelectElement).addEventListener("change", function () {
            self.selectedGeo = this.value;
            self.updateChart();
        });
    }

    public update(options: VisualUpdateOptions): void {
        if (options.dataViews && options.dataViews[0]) {
            this.dataView = options.dataViews[0];
        }
        // Parse data from DataView, populate dropdown, and update chart
        this.parseData();
        this.populateDropdown();
        this.updateChart();
    }

    // Parse table rows: [Geo, Year, GrossDebt, NominalGDP]
    private parseData(): void {
        this.allData = {};
        this.geos = [];
        if (!this.dataView || !this.dataView.table) {
            return;
        }
        const table = this.dataView.table;
        for (let i = 0; i < table.rows.length; i++) {
            const row = table.rows[i];
            const geo = String(row[0]);
            const year = +row[1];
            const grossDebt = +row[2];
            const nominalGDP = +row[3];
            if (nominalGDP > 0) {
                const ratio = (grossDebt / nominalGDP) * 100;
                if (!this.allData[geo]) {
                    this.allData[geo] = [];
                }
                this.allData[geo].push({ year: year, ratio: ratio });
            }
        }
        // Sort each geo's data by year
        for (const g in this.allData) {
            this.allData[g].sort((a, b) => a.year - b.year);
        }
        this.geos = Object.keys(this.allData);
    }

    // Populate the Geo dropdown
    private populateDropdown(): void {
        const dropdown = document.getElementById("geoDropdown") as HTMLSelectElement;
        dropdown.innerHTML = "";
        this.geos.forEach((geo) => {
            const option = document.createElement("option");
            option.value = geo;
            option.text = geo;
            dropdown.appendChild(option);
        });
        // Default selection if none set or if current selection is missing
        if (!this.selectedGeo || this.geos.indexOf(this.selectedGeo) === -1) {
            this.selectedGeo = this.geos.length > 0 ? this.geos[0] : undefined;
        }
        if (this.selectedGeo) {
            dropdown.value = this.selectedGeo;
        }
    }

    // Update the chart: filter historical data, simulate, and render
    private updateChart(): void {
        if (!this.selectedGeo || !this.allData[this.selectedGeo]) {
            return;
        }
        // Historical data: years <= 2023
        const historical = this.allData[this.selectedGeo].filter(d => d.year <= 2023);
        if (historical.length === 0) {
            return;
        }
        const lastHistRatio = historical[historical.length - 1].ratio;
        const simulated = this.simulateDebtGDP(lastHistRatio);
        const combined = historical.concat(simulated);
        this.renderLineChart(combined, historical);
    }

    // Simulation using the struct
