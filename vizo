// Visual.ts
module powerbi.extensibility.visual {
    import IVisual = powerbi.extensibility.visual.IVisual;
    import VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;
    import VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;
    import DataView = powerbi.DataView;

    export class Visual implements IVisual {
        private target: HTMLElement;
        private dataView: DataView;

        // Slider state: store user input in "percentage form" (2 means 2%).
        private sliderValues = {
            bondYield: 2,         // 2 means 2%
            spread: 50,           // 50 means 50 bp
            inflation: 2,         // 2 means 2%
            realGrowth: 2,        // 2 means 2%
            primarySurplus: 0     // 0 means 0%
        };

        constructor(options: VisualConstructorOptions) {
            this.target = options.element;

            // Build HTML: a sidebar for sliders and a main area for Plotly.
            this.target.innerHTML = `
                <div style="display:flex; height:100%;">
                    <div style="width:200px; padding:10px; border-right:1px solid #ccc;">
                        <div style="margin-bottom:10px;">
                            <label>10-Year Bond Yield (%)</label><br>
                            <input type="range" id="bondYield" min="-0.1" max="5" step="0.1" value="2">
                            <span id="bondYieldVal">2</span>
                        </div>
                        <div style="margin-bottom:10px;">
                            <label>Spread vs Bund (bp)</label><br>
                            <input type="range" id="spread" min="0" max="300" step="10" value="50">
                            <span id="spreadVal">50</span>
                        </div>
                        <div style="margin-bottom:10px;">
                            <label>Inflation (YoY %)</label><br>
                            <input type="range" id="inflation" min="0" max="10" step="0.1" value="2">
                            <span id="inflationVal">2</span>
                        </div>
                        <div style="margin-bottom:10px;">
                            <label>Real GDP Growth (YoY %)</label><br>
                            <input type="range" id="realGrowth" min="-5" max="10" step="0.1" value="2">
                            <span id="realGrowthVal">2</span>
                        </div>
                        <div style="margin-bottom:10px;">
                            <label>Primary Surplus (% of GDP)</label><br>
                            <input type="range" id="primarySurplus" min="-5" max="5" step="0.1" value="0">
                            <span id="primarySurplusVal">0</span>
                        </div>
                    </div>
                    <div style="flex-grow:1; padding:10px;">
                        <div id="plotDiv" style="width:100%; height:100%;"></div>
                    </div>
                </div>
            `;

            // Wire up slider events
            const self = this;
            (document.getElementById("bondYield") as HTMLInputElement).addEventListener("input", function() {
                self.sliderValues.bondYield = parseFloat(this.value);
                document.getElementById("bondYieldVal")!.textContent = this.value;
                self.updateChart();
            });
            (document.getElementById("spread") as HTMLInputElement).addEventListener("input", function() {
                self.sliderValues.spread = parseFloat(this.value);
                document.getElementById("spreadVal")!.textContent = this.value;
                self.updateChart();
            });
            (document.getElementById("inflation") as HTMLInputElement).addEventListener("input", function() {
                self.sliderValues.inflation = parseFloat(this.value);
                document.getElementById("inflationVal")!.textContent = this.value;
                self.updateChart();
            });
            (document.getElementById("realGrowth") as HTMLInputElement).addEventListener("input", function() {
                self.sliderValues.realGrowth = parseFloat(this.value);
                document.getElementById("realGrowthVal")!.textContent = this.value;
                self.updateChart();
            });
            (document.getElementById("primarySurplus") as HTMLInputElement).addEventListener("input", function() {
                self.sliderValues.primarySurplus = parseFloat(this.value);
                document.getElementById("primarySurplusVal")!.textContent = this.value;
                self.updateChart();
            });
        }

        // Called whenever the visual is updated (resize, data change, etc.)
        public update(options: VisualUpdateOptions) {
            if (options.dataViews && options.dataViews[0]) {
                this.dataView = options.dataViews[0];
            }
            this.updateChart();
        }

        // Gathers historical data, runs simulation, and plots with Plotly.
        private updateChart(): void {
            // 1) Get historical data from DataView
            const historicalData = this.getHistoricalData();
            if (!historicalData.length) {
                return;
            }

            // 2) Last known historical ratio
            const lastHistoricalDebtRatio = historicalData[historicalData.length - 1].value;

            // 3) Simulate future (2024â€“2050) using the structural equation
            const simulationData = this.simulateDebtGDP(lastHistoricalDebtRatio);

            // 4) Combine historical + simulation
            const allYears = historicalData.map(d => d.year).concat(simulationData.map(d => d.year));
            const allValues = historicalData.map(d => d.value).concat(simulationData.map(d => d.value));

            // 5) Plotly trace
            const trace = {
                x: allYears,
                y: allValues,
                mode: 'lines+markers',
                type: 'scatter',
                name: 'Debt-to-GDP (%)'
            };

            // 6) Plotly layout
            const layout: Partial<Plotly.Layout> = {
                title: 'Debt-to-GDP Ratio Simulation',
                xaxis: { title: 'Year' },
                yaxis: { title: 'Debt-to-GDP (%)' }
            };

            // 7) Render
            Plotly.newPlot('plotDiv', [trace], layout);
        }

        // Reads (Geo, Year, GrossDebt, Nominal-GDP) from the DataView table, 
        // filters years <= 2023, and computes Debt/GDP * 100.
        private getHistoricalData(): { year: number; value: number }[] {
            const data: { year: number; value: number }[] = [];
            if (!this.dataView || !this.dataView.table) {
                return data;
            }

            const table = this.dataView.table;
            for (let i = 0; i < table.rows.length; i++) {
                const row = table.rows[i];
                const year = +row[1];        // 2nd column = Year
                const grossDebt = +row[2];   // 3rd column = GrossDebt
                const nominalGDP = +row[3];  // 4th column = Nominal-GDP
                if (year <= 2023) {
                    // Convert to percentage
                    const ratio = (grossDebt / nominalGDP) * 100;
                    data.push({ year: year, value: ratio });
                }
            }

            // Sort by year just in case
            data.sort((a, b) => a.year - b.year);
            return data;
        }

        // Uses the exact structural equation:
        //   D_{t+1}/Y_{t+1} = ( [1 + (Y_{10,t} + Spread_t/10000)] / [(1 + pi_t)*(1 + g_real,t)] ) * (D_t/Y_t ) - PS_t
        // Here, slider values (bondYield, inflation, etc.) are in "user-friendly %", so convert to decimals.
        private simulateDebtGDP(lastHistoricalDebtRatio: number): { year: number; value: number }[] {
            const simulation: { year: number; value: number }[] = [];
            let currentDebtRatio = lastHistoricalDebtRatio;

            // Convert user "2" to decimal "0.02"
            const bondYieldDecimal = this.sliderValues.bondYield / 100; 
            const spreadDecimal = this.sliderValues.spread / 10000;     // 50 => 0.005
            const inflationDecimal = this.sliderValues.inflation / 100; // 2 => 0.02
            const realGrowthDecimal = this.sliderValues.realGrowth / 100;
            const psDecimal = this.sliderValues.primarySurplus / 100;

            // Simulate from 2024 to 2050
            for (let year = 2024; year <= 2050; year++) {
                // Numerator: 1 + ( Y_{10,t} + Spread_t/10000 )
                const numerator = 1 + (bondYieldDecimal + spreadDecimal);
                // Denominator: (1 + pi_t)*(1 + g_real,t)
                const denominator = (1 + inflationDecimal) * (1 + realGrowthDecimal);

                // Apply the equation
                currentDebtRatio = (numerator / denominator) * currentDebtRatio - psDecimal;

                // Store
                simulation.push({ year: year, value: currentDebtRatio });
            }
            return simulation;
        }
    }
}
