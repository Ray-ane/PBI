# Define connection parameters
$server   = "Sal"               # SQL Server name or address
$database = "YourDatabase"      # Name of your database
$username = "YourSQLUser"       # SQL Server login name
$password = "YourSQLPassword"   # SQL Server login password

# Define the query you want to execute
$query = "SELECT * FROM YourTable"

# Build the connection string for SQL Server authentication
$connectionString = "Server=$server;Database=$database;User Id=$username;Password=$password;"

# Create a new SQL connection object
$connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)

try {
    # Open the connection
    $connection.Open()
    Write-Output "Connection opened successfully."

    # Create a SQL command object with the query
    $command = $connection.CreateCommand()
    $command.CommandText = $query

    # Option 1: Using DataAdapter to fill a DataTable and then print it
    $adapter = New-Object System.Data.SqlClient.SqlDataAdapter($command)
    $dataTable = New-Object System.Data.DataTable
    $adapter.Fill($dataTable) | Out-Null

    # Print the DataTable as a formatted table in the console
    $dataTable | Format-Table -AutoSize

    # Option 2: Alternatively, using a DataReader and collecting results into objects
    # Uncomment the following block if you prefer this approach.
    <#
    $reader = $command.ExecuteReader()
    $rows = @()

    while ($reader.Read()) {
        # Create a new PSObject for each row
        $rowObject = New-Object PSObject
        for ($i = 0; $i -lt $reader.FieldCount; $i++) {
            $columnName = $reader.GetName($i)
            $columnValue = $reader[$i]
            $rowObject | Add-Member -MemberType NoteProperty -Name $columnName -Value $columnValue
        }
        $rows += $rowObject
    }
    $reader.Close()
    $rows | Format-Table -AutoSize
    #>
}
catch {
    Write-Error "An error occurred: $_"
}
finally {
    # Always close the connection
    $connection.Close()
    Write-Output "Connection closed."
}