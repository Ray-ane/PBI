import msal
import requests
import time
from cryptography.hazmat.primitives.serialization import pkcs12
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from msal.oauth2cli import DefaultHttpClient

# Replace these values with your own
tenant_id = 'your-tenant-id'
client_id = 'your-client-id'
cert_file = 'path/to/yourcert.p12'       # Your .p12 certificate file
cert_password = 'your-cert-password'     # None if not set

workspace_id = 'your-workspace-id'       # Workspace (Group) ID
report_name = 'Your Report Name'         # Name of the report to export
output_path = 'report.pdf'               # Output PDF file path
save_locally = True                      # Set to False if you don't want to save locally

# Effective identity (if needed for RLS)
effective_identity_username = 'user@example.com'  # Replace with the effective username
effective_identity_roles = ['Role1', 'Role2']     # Replace with roles defined in RLS

# Define your proxy settings (if needed)
proxies = {
    'http': 'http://your-proxy-server:port',
    'https': 'http://your-proxy-server:port',
}

# Create a custom session and set the proxies
session = requests.Session()
session.proxies.update(proxies)

# Create an MSAL HTTP client with the custom session
http_client = DefaultHttpClient(session)

# Load the certificate and private key from the P12 file
with open(cert_file, 'rb') as f:
    p12_data = f.read()

private_key, certificate, additional_certificates = pkcs12.load_key_and_certificates(
    p12_data,
    cert_password.encode() if cert_password else None,
    backend=default_backend()
)

# Compute the thumbprint using the correct hash algorithm
thumbprint = certificate.fingerprint(hashes.SHA1()).hex()

# Serialize the private key to PEM format
private_key_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

# Initialize the MSAL confidential client application with the custom http_client
app = msal.ConfidentialClientApplication(
    client_id,
    authority=f"https://login.microsoftonline.com/{tenant_id}",
    client_credential={
        "private_key": private_key_pem.decode(),
        "thumbprint": thumbprint,
    },
    http_client=http_client
)

# Acquire a token
scope = ["https://analysis.windows.net/powerbi/api/.default"]
result = app.acquire_token_for_client(scopes=scope)

if "access_token" in result:
    access_token = result['access_token']

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }

    # Use the custom session for API calls
    def export_report_to_pdf(workspace_id, report_name, output_path, headers, save_locally):
        # Function to get report ID by name
        def get_report_id(workspace_id, report_name):
            reports_url = f'https://api.powerbi.com/v1.0/myorg/groups/{workspace_id}/reports'
            response = session.get(reports_url, headers=headers)
            if response.status_code == 200:
                reports_data = response.json()
                for report in reports_data.get('value', []):
                    if report['name'] == report_name:
                        return report['id'], report['datasetId']
                print(f"Report with name '{report_name}' not found in workspace '{workspace_id}'")
                return None, None
            else:
                print(f"Failed to get reports from workspace '{workspace_id}': {response.status_code}")
                print(response.text)
                return None, None

        # Get the report ID and dataset ID
        report_id, dataset_id = get_report_id(workspace_id, report_name)
        if not report_id or not dataset_id:
            raise Exception("Report ID or Dataset ID not found")

        # Prepare export request URL and body
        export_url = f"https://api.powerbi.com/v1.0/myorg/groups/{workspace_id}/reports/{report_id}/ExportTo"

        # Build the export configuration with effective identity
        effective_identity = {
            "username": effective_identity_username,
            "roles": effective_identity_roles,
            "datasets": [dataset_id]
        }

        export_body = {
            "format": "PDF",
            "powerBIReportConfiguration": {
                "identities": [effective_identity]
            }
        }

        # Invoke export API
        export_response = session.post(export_url, headers=headers, json=export_body)
        if not export_response.ok:
            print(f"Failed export initiation response: {export_response.text}")
            raise Exception(f"Error initiating export: {export_response.text}")

        export_id = export_response.json().get('id')
        print(f"Export initiated. Export ID: {export_id}")

        # Poll for export status
        status_url = f"https://api.powerbi.com/v1.0/myorg/groups/{workspace_id}/reports/{report_id}/exports/{export_id}"
        start_time = time.time()
        timeout = 1800  # 30 minutes
        sleep_duration = 10  # seconds

        while True:
            time.sleep(sleep_duration)
            status_response = session.get(status_url, headers=headers)
            if not status_response.ok:
                print(f"Failed status check response: {status_response.text}")
                raise Exception(f"Error getting export status: {status_response.text}, Status code: {status_response.status_code}")

            status = status_response.json()
            export_status = status['status']
            percent_complete = status.get('percentComplete', 0)
            print(f"Export status: {export_status}, Percent complete: {percent_complete}%")

            if export_status == "Succeeded":
                file_url = status['resourceLocation']
                print(f"Export succeeded. Download URL: {file_url}")
                break
            elif export_status == "Failed":
                print("Export job failed.")
                print("Error details:")
                print(status.get('error'))
                raise Exception("Export failed")

            if time.time() - start_time > timeout:
                raise Exception("Export process timed out")

        # Download the exported report
        download_response = session.get(file_url, headers=headers)
        if download_response.status_code // 100 == 2:
            if save_locally:
                with open(output_path, 'wb') as file:
                    file.write(download_response.content)
                print(f"Report saved to {output_path}")
            else:
                print("Report downloaded but not saved locally as per configuration.")
            return file_url, output_path
        else:
            raise Exception(f"Error downloading report: {download_response.text}")

    # Call the function to export the report
    try:
        export_report_to_pdf(workspace_id, report_name, output_path, headers, save_locally)
    except Exception as e:
        print(f"An error occurred: {e}")
else:
    print(f"Error acquiring token: {result.get('error')}")
    print(result.get('error_description'))
    print(result.get('correlation_id'))
