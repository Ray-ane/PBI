import msal
import requests
import time
# Remove hashlib import
# import hashlib
from cryptography.hazmat.primitives.serialization import pkcs12
from cryptography.hazmat.backends import default_backend

# Replace these values with your own
tenant_id = 'your-tenant-id'
client_id = 'your-client-id'
cert_file = 'path/to/yourcert.p12'       # Updated to .p12 extension
cert_password = 'your-cert-password'     # Use None if not set

group_id = 'your-group-id'               # The Workspace (Group) ID
report_name = 'Your Report Name'         # The name of the report to export
output_file = 'report.pdf'               # Output PDF file path

# Load the certificate and private key from the P12 file
with open(cert_file, 'rb') as f:
    p12_data = f.read()

private_key, certificate, additional_certificates = pkcs12.load_key_and_certificates(
    p12_data,
    cert_password.encode() if cert_password else None,
    backend=default_backend()
)

# Import the correct hash algorithm
from cryptography.hazmat.primitives import hashes

# Compute the thumbprint using the correct hash algorithm
thumbprint = certificate.fingerprint(hashes.SHA1()).hex()

# Serialize the private key to PEM format
from cryptography.hazmat.primitives import serialization

private_key_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

# Initialize the MSAL confidential client application
app = msal.ConfidentialClientApplication(
    client_id,
    authority=f"https://login.microsoftonline.com/{tenant_id}",
    client_credential={
        "private_key": private_key_pem.decode(),
        "thumbprint": thumbprint,
    }
)

# Acquire a token
scope = ["https://analysis.windows.net/powerbi/api/.default"]
result = app.acquire_token_for_client(scopes=scope)

if "access_token" in result:
    access_token = result['access_token']

    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }

    # Function to get report ID by name
    def get_report_id(access_token, group_id, report_name):
        reports_url = f'https://api.powerbi.com/v1.0/myorg/groups/{group_id}/reports'
        response = requests.get(reports_url, headers=headers)
        if response.status_code == 200:
            reports_data = response.json()
            for report in reports_data.get('value', []):
                if report['name'] == report_name:
                    return report['id']
            print(f"Report with name '{report_name}' not found in workspace '{group_id}'")
            return None
        else:
            print(f"Failed to get reports from workspace '{group_id}': {response.status_code}")
            print(response.text)
            return None

    # Get the report ID
    report_id = get_report_id(access_token, group_id, report_name)
    if not report_id:
        exit(1)

    # Start the export job
    export_url = f'https://api.powerbi.com/v1.0/myorg/groups/{group_id}/reports/{report_id}/ExportTo'

    # Request body parameters
    export_config = {
        "format": "PDF"
        # You can add more configurations here if needed
    }

    response = requests.post(export_url, headers=headers, json=export_config)

    if response.status_code == 202:
        # Get the export ID from the Location header
        location = response.headers.get('Location')
        if location:
            export_id = location.split('/')[-1]
        else:
            response_data = response.json()
            export_id = response_data.get('id')

        if not export_id:
            print("Failed to get export ID")
            print(response.text)
            exit(1)

        # Poll the export status
        status_url = f'https://api.powerbi.com/v1.0/myorg/groups/{group_id}/reports/{report_id}/exports/{export_id}'
        while True:
            status_response = requests.get(status_url, headers=headers)
            if status_response.status_code == 200:
                status_data = status_response.json()
                status = status_data['status']
                if status == 'Succeeded':
                    # Download the exported file
                    file_url = status_data['resourceLocation']
                    file_response = requests.get(file_url, headers=headers, stream=True)
                    if file_response.status_code == 200:
                        with open(output_file, 'wb') as f:
                            for chunk in file_response.iter_content(chunk_size=8192):
                                if chunk:
                                    f.write(chunk)
                        print(f"Report exported successfully to {output_file}")
                    else:
                        print(f"Failed to download the exported file: {file_response.status_code}")
                        print(file_response.text)
                    break
                elif status in ('Running', 'NotStarted'):
                    print(f"Export job status: {status}. Waiting for 5 seconds...")
                    time.sleep(5)
                else:
                    print(f"Export job failed with status: {status}")
                    print(status_data)
                    break
            else:
                print(f"Error checking export status: {status_response.status_code}")
                print(status_response.text)
                break
    else:
        print(f"Error starting export job: {response.status_code}")
        print(response.text)
else:
    print(f"Error acquiring token: {result.get('error')}")
    print(result.get('error_description'))
    print(result.get('correlation_id'))
