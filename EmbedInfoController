using System.Threading.Tasks;
using AppOwnsData.Models;
using AppOwnsData.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using System;
using System.Text.Json;

namespace AppOwnsData.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmbedInfoController : Controller
    {
        private readonly PbiEmbedService pbiEmbedService;
        private readonly IOptions<AzureAd> azureAd;
        private readonly IOptions<PowerBI> powerBI;

        public EmbedInfoController(PbiEmbedService pbiEmbedService, IOptions<AzureAd> azureAd, IOptions<PowerBI> powerBI)
        {
            this.pbiEmbedService = pbiEmbedService;
            this.azureAd = azureAd;
            this.powerBI = powerBI;
        }

        /// <summary>
        /// Returns Embed token, Embed URL, and Embed token expiry to the client
        /// </summary>
        /// <returns>JSON containing parameters for embedding</returns>
        [HttpGet("getembedinfo")]
        public async Task<string> GetEmbedInfo(string workspaceId, string reportId)
        {
            try
            {
                // Validate whether all the required configurations are provided in appsettings.json
                string configValidationResult = ConfigValidatorService.ValidateConfig(azureAd, powerBI);
                if (configValidationResult != null)
                {
                    HttpContext.Response.StatusCode = 400;
                    return configValidationResult;
                }

                var embedToken = await pbiEmbedService.GetEmbedTokenAsync(workspaceId, reportId);
                var report = await pbiEmbedService.GetReportAsync(workspaceId, reportId);
                var embedInfo = new
                {
                    reportConfig = new[]
                    {
                        new {
                            reportId = report.Id,
                            reportName = report.Name,
                            embedUrl = report.EmbedUrl,
                            datasetId = report.DatasetId
                        }
                    },
                    accessToken = embedToken.Token,
                    tokenExpiry = embedToken.Expiration.ToString("O"),
                    tokenId = embedToken.TokenId
                };

                return JsonSerializer.Serialize(embedInfo);
            }
            catch (Exception ex)
            {
                HttpContext.Response.StatusCode = 500;
                return ex.Message + "\n\n" + ex.StackTrace;
            }
        }

        /// <summary>
        /// Returns the list of workspaces
        /// </summary>
        /// <returns>JSON containing list of workspaces</returns>
        [HttpGet("getworkspaces")]
        public async Task<IActionResult> GetWorkspaces()
        {
            try
            {
                var workspaces = await pbiEmbedService.GetWorkspacesAsync();
                return Ok(workspaces);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        /// <summary>
        /// Returns the list of reports in a workspace
        /// </summary>
        /// <returns>JSON containing list of reports</returns>
        [HttpGet("getreports")]
        public async Task<IActionResult> GetReports(string workspaceId)
        {
            try
            {
                var reports = await pbiEmbedService.GetReportsAsync(workspaceId);
                return Ok(reports);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}
