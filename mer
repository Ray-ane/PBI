/**
 * Power BI Custom Visual for Ornstein-Uhlenbeck Process Estimation
 * This visual analyzes the difference between two bond error series and applies
 * the Ornstein-Uhlenbeck process when the series is stationary.
 */

"use strict";
import "./../style/visual.less";
import * as d3 from "d3";
import powerbiVisualsApi from "powerbi-visuals-api";
import IVisual = powerbiVisualsApi.extensibility.visual.IVisual;
import VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;
import VisualUpdateOptions = powerbiVisualsApi.extensibility.visual.VisualUpdateOptions;
import DataView = powerbiVisualsApi.DataView;

// Constants
const CHART_MARGINS = { top: 40, right: 30, bottom: 120, left: 60 };
const FORECAST_STEPS = 30;
const ADF_THRESHOLD = -3;
const DEFAULT_LAMBDA = 1.0;
const DEFAULT_SIGMA = 1.0;

/**
 * Interface representing a single row of input data
 */
interface DataRow {
    inputdate: Date;
    context1: string;
    isin1: string;
    isin2: string;
    bond1: string;
    bond2: string;
    error: number;
}

/**
 * Interface for the difference series points
 */
interface DiffPoint {
    inputdate: Date;
    diff: number;
}

/**
 * Interface for OU process parameters and forecasts
 */
interface OUResults {
    lambda: number;
    mu: number;
    sigma: number;
    forecastPoints: DiffPoint[];
    upperBoundPoints: DiffPoint[];
    lowerBoundPoints: DiffPoint[];
}

export class Visual implements IVisual {
    // DOM Elements
    private target: HTMLElement;
    private svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;
    private dropdownPairs: HTMLSelectElement;
    private lambdaSlider: HTMLInputElement;
    private sigmaSlider: HTMLInputElement;

    // Data Storage
    private allData: DataRow[] = [];
    private diffSeries: DiffPoint[] = [];
    private adfTestCache: Map<string, boolean> = new Map();

    // Ornstein-Uhlenbeck Parameters
    private lambdaHat: number = 0;
    private muHat: number = 0;
    private sigmaHat: number = 0;
    private delta: number = 1;

    // Viewport Configuration
    private currentViewport: { width: number; height: number } = { width: 600, height: 300 };
    private diffSeriesStationary: boolean = false;

    constructor(options: VisualConstructorOptions) {
        this.initializeVisual(options);
    }

    /**
     * Initializes the visual with controls and event listeners
     */
    private initializeVisual(options: VisualConstructorOptions): void {
        this.target = options.element;
        this.target.innerHTML = "";

        this.createControlContainer();
        this.createTooltip();
        this.initializeControls();
        this.createSVGContainer();
    }

    /**
     * Creates the control container with dropdown and sliders
     */
    private createControlContainer(): void {
        const controlContainer = document.createElement("div");
        controlContainer.id = "control-container";
        controlContainer.innerHTML = `
            <div id="dropdown-container">
                <label for="pairDropdown">Select Pair (Bond1 vs Bond2):</label>
                <select id="pairDropdown" style="font-size: 10px;"></select>
                <div style="margin-top: 5px;">
                    <input type="checkbox" id="showOnlyADFPairs" style="margin-right: 5px;">
                    <label for="showOnlyADFPairs">Show only pairs that pass ADF test</label>
                </div>
            </div>
            <div id="slider-container">
            <div>
                <label for="lambdaSlider">Lambda Factor:</label>
                    <input id="lambdaSlider" type="range" min="0.1" max="2.0" step="0.01" value="1.0">
                <span id="lambdaValue">1.0</span>
            </div>
            <div>
                <label for="sigmaSlider">Sigma Factor:</label>
                    <input id="sigmaSlider" type="range" min="0.1" max="1.5" step="0.01" value="1.0">
                <span id="sigmaValue">1.0</span>
                </div>
            </div>
        `;
        this.target.appendChild(controlContainer);
    }

    /**
     * Creates the tooltip element
     */
    private createTooltip(): void {
        const tooltip = document.createElement("div");
        tooltip.id = "tooltip";
        tooltip.style.position = "absolute";
        tooltip.style.padding = "8px";
        tooltip.style.background = "rgba(255, 255, 255, 0.9)";
        tooltip.style.border = "1px solid #ddd";
        tooltip.style.borderRadius = "4px";
        tooltip.style.pointerEvents = "none";
        tooltip.style.fontSize = "12px";
        tooltip.style.zIndex = "1000";
        this.target.appendChild(tooltip);
    }

    /**
     * Initializes control elements and event listeners
     */
    private initializeControls(): void {
        this.dropdownPairs = document.getElementById("pairDropdown") as HTMLSelectElement;
        this.lambdaSlider = document.getElementById("lambdaSlider") as HTMLInputElement;
        this.sigmaSlider = document.getElementById("sigmaSlider") as HTMLInputElement;
        const showOnlyADFPairsCheckbox = document.getElementById("showOnlyADFPairs") as HTMLInputElement;

        this.dropdownPairs.addEventListener("change", () => this.updateChartsInner());
        this.lambdaSlider.addEventListener("input", () => {
            (document.getElementById("lambdaValue") as HTMLElement).innerText = this.lambdaSlider.value;
            this.updateChartsInner();
        });
        this.sigmaSlider.addEventListener("input", () => {
            (document.getElementById("sigmaValue") as HTMLElement).innerText = this.sigmaSlider.value;
            this.updateChartsInner();
        });
        showOnlyADFPairsCheckbox.addEventListener("change", () => this.updateDropdown());
    }

    /**
     * Creates the SVG container for the chart
     */
    private createSVGContainer(): void {
        this.svg = d3.select(this.target)
            .append("svg")
            .classed("ou-estimation-visual", true);
    }

    /**
     * Parses a single row of data with validation
     */
    private parseDataRow(row: any[]): DataRow | null {
        let dateVal: Date;
        if (row[0] instanceof Date) {
            dateVal = row[0];
        } else if (typeof row[0] === 'string') {
            dateVal = new Date(row[0]);
            if (isNaN(dateVal.getTime())) return null;
        } else if (typeof row[0] === 'number') {
            dateVal = new Date(row[0]);
        } else {
            return null;
        }

        return {
            inputdate: dateVal,
            context1: row[1]?.toString() || "",
            isin1: row[2]?.toString() || "",
            isin2: row[3]?.toString() || "",
            bond1: row[4]?.toString() || "",
            bond2: row[5]?.toString() || "",
            error: +row[6]
        };
    }

    /**
     * Resets sliders to default values
     */
    private resetSliders(): void {
        this.lambdaSlider.value = DEFAULT_LAMBDA.toString();
        this.sigmaSlider.value = DEFAULT_SIGMA.toString();
        (document.getElementById("lambdaValue") as HTMLElement).innerText = DEFAULT_LAMBDA.toString();
        (document.getElementById("sigmaValue") as HTMLElement).innerText = DEFAULT_SIGMA.toString();
    }

    public update(options: VisualUpdateOptions) {
        const dataView: DataView = options.dataViews?.[0];
        if (!dataView?.table) return;
        
        this.currentViewport = options.viewport || { width: 600, height: 300 };
        this.resetSliders();

        const rows = dataView.table.rows;
        if (!rows?.length) return;

        // Parse and sort data
        this.allData = rows
            .map(row => this.parseDataRow(row))
            .filter((row): row is DataRow => row !== null)
            .sort((a, b) => a.inputdate.getTime() - b.inputdate.getTime());

        // Update dropdown with latest P_VALUE rows
        this.updateDropdown();
        
        // Update chart if data is available
        if (this.allData.length > 0) {
            this.updateChartsInner();
        }
    }

    private computeDiffSeries(bond1: string, bond2: string): DiffPoint[] {
        const errorRows = this.allData.filter(d => 
            d.context1.trim().toUpperCase() === "ERROR"
        );

        const mapBond1 = new Map<string, number>();
        const mapBond2 = new Map<string, number>();
        
        errorRows.forEach(d => {
            const key = d.inputdate.toDateString();
            if (d.bond1.trim() === bond1.trim()) {
                mapBond1.set(key, d.error);
            } else if (d.bond1.trim() === bond2.trim()) {
                mapBond2.set(key, d.error);
            }
        });

        return Array.from(mapBond1.entries())
            .filter(([key]) => mapBond2.has(key))
            .map(([key, val1]) => ({
                inputdate: new Date(key),
                diff: mapBond2.get(key)! - val1
            }))
            .sort((a, b) => a.inputdate.getTime() - b.inputdate.getTime());
    }

    private checkADFTest(pair: string): boolean {
        // Check cache first
        if (this.adfTestCache.has(pair)) {
            return this.adfTestCache.get(pair)!;
        }

        const [bond1, bond2] = pair.split(" vs ");
        const diffSeries = this.computeDiffSeries(bond1, bond2);

        if (diffSeries.length < 2) {
            this.adfTestCache.set(pair, false);
            return false;
        }

        const diffs = diffSeries.map(d => d.diff);
        const result = this.performADFTest(diffs);
        this.adfTestCache.set(pair, result);
        return result;
    }

    private updateDropdown(): void {
        const pValueRows = this.allData.filter(d => 
            d.context1.trim().toUpperCase() === "P_VALUE"
        );

        if (pValueRows.length === 0) {
            this.dropdownPairs.options.length = 0;
            this.svg.selectAll("*").remove();
            return;
        }

        const maxDate = d3.max(pValueRows, d => d.inputdate.getTime())!;
        const latestRows = pValueRows.filter(d => 
            d.inputdate.toDateString() === new Date(maxDate).toDateString()
        );

        // Get unique pairs
        const uniquePairs = Array.from(new Set(
            latestRows.map(row => `${row.bond1} vs ${row.bond2}`)
        ));

        // Check if we should filter for ADF-passing pairs
        const showOnlyADFPairs = (document.getElementById("showOnlyADFPairs") as HTMLInputElement).checked;
        
        // Filter pairs based on ADF test if needed
        const filteredPairs = showOnlyADFPairs 
            ? uniquePairs.filter(pair => this.checkADFTest(pair))
            : uniquePairs;

        // Update dropdown
        this.dropdownPairs.options.length = 0;
        filteredPairs.forEach(pair => {
            const opt = document.createElement("option");
            opt.value = pair;
            opt.text = pair;
            opt.style.fontSize = "10px";
            this.dropdownPairs.appendChild(opt);
        });

        if (filteredPairs.length > 0) {
            this.dropdownPairs.value = filteredPairs[0];
        }
    }

    private updateChartsInner() {
        if (this.dropdownPairs.options.length === 0) return;
        
        const selectedPair = this.dropdownPairs.value;
        if (!selectedPair) return;
        
        const [selectedBond1, selectedBond2] = selectedPair.split(" vs ");
        this.diffSeries = this.computeDiffSeries(selectedBond1, selectedBond2);

        if (this.diffSeries.length < 2) {
            this.renderChart(false);
            return;
        }

        // Apply ADF test and render chart
        const diffs = this.diffSeries.map(d => d.diff);
        this.diffSeriesStationary = this.performADFTest(diffs);
        this.renderChart(this.diffSeriesStationary);
    }

    private performADFTest(data: number[]): boolean {
        if (data.length < 3) return false;
        
        const dX = data.slice(1).map((val, i) => val - data[i]);
        const lagX = data.slice(0, -1);
        
        const meanLag = d3.mean(lagX)!;
        const meanDX = d3.mean(dX)!;
        
        const num = dX.reduce((sum, val, i) => 
            sum + (lagX[i] - meanLag) * (val - meanDX), 0);
        const den = lagX.reduce((sum, val) => 
            sum + Math.pow(val - meanLag, 2), 0);
            
        const slope = num / den;
        const ssr = dX.reduce((sum, val, i) => 
            sum + Math.pow(val - slope * lagX[i], 2), 0);
            
        const s2 = ssr / (dX.length - 2);
        const se = Math.sqrt(s2 / den);
        const tStat = slope / se;
        
        return tStat < ADF_THRESHOLD;
    }

    private calculateOUParameters(diffValues: number[], dates: Date[]): OUResults {
        const n = diffValues.length - 1;
        const diffMean = d3.mean(diffValues)!;
        
        // Calculate alpha
        const num = diffValues.slice(1).reduce((sum, val, i) => 
            sum + (val - diffMean) * (diffValues[i] - diffMean), 0);
        const den = diffValues.slice(0, -1).reduce((sum, val) => 
            sum + Math.pow(val - diffMean, 2), 0);
        let alphaHat = Math.max(Math.min(num / den, 0.9999999), -0.9999999);

        // Calculate time parameters
        const delta = (dates[dates.length - 1].getTime() - dates[0].getTime()) / n;
        const deltaDays = delta / (1000 * 60 * 60 * 24);

        // Calculate OU parameters
        const lambdaHat = -Math.log(alphaHat) / deltaDays;
        
        // Calculate mu
        const sumResidual = diffValues.slice(1).reduce((sum, val, i) => 
            sum + val - alphaHat * diffValues[i], 0);
        const muHat = sumResidual / (n * (1 - alphaHat));

        // Calculate sigma
        const sumSq = diffValues.slice(1).reduce((sum, val, i) => {
            const r = val - alphaHat * diffValues[i] - (1 - alphaHat) * muHat;
            return sum + r * r;
        }, 0);
        const sigmaSqHat = (2 * lambdaHat) / (1 - alphaHat * alphaHat) * (1 / n) * sumSq;
        const sigmaHat = Math.sqrt(Math.max(sigmaSqHat, 0));

        // Apply slider scaling
        const lambdaFactor = parseFloat(this.lambdaSlider.value);
        const sigmaFactor = parseFloat(this.sigmaSlider.value);
        const newLambda = lambdaHat * lambdaFactor;
        const newSigma = sigmaHat * sigmaFactor;
        const alpha = Math.exp(-newLambda * deltaDays);

        // Generate forecast points
        const lastDiff = diffValues[diffValues.length - 1];
        const lastTime = dates[dates.length - 1].getTime();
        
        const forecastPoints: DiffPoint[] = [];
        const upperBoundPoints: DiffPoint[] = [];
        const lowerBoundPoints: DiffPoint[] = [];

        for (let i = 0; i <= FORECAST_STEPS; i++) {
            const nextDate = new Date(lastTime + i * delta);
            const meanForecast = muHat + (lastDiff - muHat) * Math.pow(alpha, i);
            const varForecast = (newSigma * newSigma) / (2 * newLambda) * (1 - Math.pow(alpha, 2 * i));
            const stdDev = Math.sqrt(varForecast);
            
            forecastPoints.push({ inputdate: nextDate, diff: meanForecast });
            upperBoundPoints.push({ inputdate: nextDate, diff: meanForecast + 1.96 * stdDev });
            lowerBoundPoints.push({ inputdate: nextDate, diff: meanForecast - 1.96 * stdDev });
        }

        return {
            lambda: newLambda,
            mu: muHat,
            sigma: newSigma,
            forecastPoints,
            upperBoundPoints,
            lowerBoundPoints
        };
    }

    private renderChart(isStationary: boolean) {
        // Clear previous chart
        this.svg.selectAll("*").remove();

        // Set up dimensions
        const width = this.currentViewport.width;
        const height = this.currentViewport.height;
        this.svg.attr("width", width).attr("height", height);

        // Calculate inner dimensions
        const innerWidth = width - CHART_MARGINS.left - CHART_MARGINS.right;
        const innerHeight = height - CHART_MARGINS.top - CHART_MARGINS.bottom;

        // Create main chart group
        const g = this.svg.append("g")
            .attr("transform", `translate(${CHART_MARGINS.left}, ${CHART_MARGINS.top})`);

        // Check for data
        if (this.diffSeries.length < 1) {
            g.append("text")
                .attr("x", innerWidth / 2)
                .attr("y", innerHeight / 2)
                .attr("text-anchor", "middle")
                .attr("fill", "red")
                .style("font-size", "14px")
                .text("No data to display.");
            return;
        }

        // Create scales and line generator
        const { xScale, yScale } = this.createScales(isStationary, innerWidth, innerHeight);
        const lineGen = d3.line<DiffPoint>()
            .x(d => xScale(d.inputdate))
            .y(d => yScale(d.diff))
            .curve(d3.curveMonotoneX);

        // Create tooltip behavior
        const tooltip = d3.select("#tooltip");
        const bisectDate = d3.bisector<DiffPoint, Date>(d => d.inputdate).left;

        const showTooltip = (event: MouseEvent, d: DiffPoint) => {
            tooltip
                .style("opacity", 1)
                .style("left", (event.pageX + 10) + "px")
                .style("top", (event.pageY - 10) + "px")
                .html(`Date: ${d.inputdate.toLocaleDateString()}<br/>Value: ${d.diff.toFixed(4)}`);
        };

        const hideTooltip = () => {
            tooltip.style("opacity", 0);
        };

        if (isStationary) {
            this.renderStationaryChart(g, xScale, yScale, lineGen, showTooltip, hideTooltip, bisectDate, innerWidth, innerHeight);
        } else {
            this.renderNonStationaryChart(g, xScale, yScale, lineGen, showTooltip, hideTooltip, bisectDate, innerWidth, innerHeight);
        }

        // Add axes
        this.addAxes(g, xScale, yScale, innerWidth, innerHeight);
    }

    private createScales(isStationary: boolean, innerWidth: number, innerHeight: number) {
        let xScale: d3.ScaleTime<number, number>;
        let yScale: d3.ScaleLinear<number, number>;

        if (isStationary) {
            const ouResults = this.calculateOUParameters(
                this.diffSeries.map(d => d.diff),
                this.diffSeries.map(d => d.inputdate)
            );

            const allX = this.diffSeries.map(d => d.inputdate)
                .concat(ouResults.forecastPoints.map(d => d.inputdate));
            const allY = this.diffSeries.map(d => d.diff)
                .concat(ouResults.forecastPoints.map(d => d.diff))
                .concat(ouResults.upperBoundPoints.map(d => d.diff))
                .concat(ouResults.lowerBoundPoints.map(d => d.diff));

            xScale = d3.scaleTime()
            .domain([d3.min(allX) as Date, d3.max(allX) as Date])
            .range([0, innerWidth]);

            yScale = d3.scaleLinear()
            .domain([d3.min(allY) as number, d3.max(allY) as number])
            .range([innerHeight, 0])
            .nice();
        } else {
            xScale = d3.scaleTime()
                .domain([
                    d3.min(this.diffSeries, d => d.inputdate)!,
                    d3.max(this.diffSeries, d => d.inputdate)!
                ])
                .range([0, innerWidth]);

            yScale = d3.scaleLinear()
                .domain([
                    d3.min(this.diffSeries, d => d.diff) as number,
                    d3.max(this.diffSeries, d => d.diff) as number
                ])
                .range([innerHeight, 0])
                .nice();
        }

        return { xScale, yScale };
    }

    private renderStationaryChart(
        g: d3.Selection<SVGGElement, unknown, null, undefined>,
        xScale: d3.ScaleTime<number, number>,
        yScale: d3.ScaleLinear<number, number>,
        lineGen: d3.Line<DiffPoint>,
        showTooltip: (event: MouseEvent, d: DiffPoint) => void,
        hideTooltip: () => void,
        bisectDate: (arr: DiffPoint[], x: Date) => number,
        innerWidth: number,
        innerHeight: number
    ) {
        const ouResults = this.calculateOUParameters(
            this.diffSeries.map(d => d.diff),
            this.diffSeries.map(d => d.inputdate)
        );

        // Store parameters
        this.lambdaHat = ouResults.lambda;
        this.muHat = ouResults.mu;
        this.sigmaHat = ouResults.sigma;

        // Display parameter estimates
        g.append("text")
            .attr("x", 10)
            .attr("y", -10)
            .attr("fill", "#333")
            .style("font-size", "12px")
            .text(`μ = ${this.muHat.toFixed(2)}, λ = ${this.lambdaHat.toFixed(2)} (×${this.lambdaSlider.value}), σ = ${this.sigmaHat.toFixed(2)} (×${this.sigmaSlider.value})`);

        // Add status text
        g.append("text")
            .attr("x", innerWidth - 10)
            .attr("y", -10)
            .attr("text-anchor", "end")
            .style("fill", "green")
            .style("font-size", "12px")
            .text("ADF passed: Series stationary. OU applied.");

        // Draw forecast confidence bands
        g.append("path")
            .datum(ouResults.lowerBoundPoints)
            .attr("fill", "none")
            .attr("stroke", "grey")
            .attr("stroke-width", 1)
            .style("stroke-dasharray", "3,3")
            .attr("d", lineGen);

        g.append("path")
            .datum(ouResults.upperBoundPoints)
            .attr("fill", "none")
            .attr("stroke", "grey")
            .attr("stroke-width", 1)
            .style("stroke-dasharray", "3,3")
            .attr("d", lineGen);

        // Draw forecast mean line
        g.append("path")
            .datum(ouResults.forecastPoints)
            .attr("fill", "none")
            .attr("stroke", "orange")
            .attr("stroke-width", 2)
            .style("stroke-dasharray", "0")
            .attr("d", lineGen);

        // Draw historical data line
        g.append("path")
            .datum(this.diffSeries)
            .attr("fill", "none")
            .attr("stroke", "#00818F")
            .attr("stroke-width", 2)
            .style("stroke-dasharray", "0")
            .attr("d", lineGen);

        // Add tooltip interaction overlay for the entire chart area
        const overlay = g.append("rect")
            .attr("width", innerWidth)
            .attr("height", innerHeight)
            .style("fill", "none")
            .style("pointer-events", "all")
            .on("mousemove", (event) => {
                const mouseX = xScale.invert(d3.pointer(event)[0]);
                
                // Find the closest point in historical data
                const histIndex = bisectDate(this.diffSeries, mouseX);
                const histPoint = this.diffSeries[histIndex];
                
                // Find the closest point in forecast data
                const forecastIndex = bisectDate(ouResults.forecastPoints, mouseX);
                const forecastPoint = ouResults.forecastPoints[forecastIndex];
                
                // Find the closest points in upper and lower bounds
                const upperPoint = ouResults.upperBoundPoints[forecastIndex];
                const lowerPoint = ouResults.lowerBoundPoints[forecastIndex];

                // Determine which point to show based on which is closer to the mouse
                let tooltipContent = "";
                
                if (histPoint && forecastPoint) {
                    const histDist = Math.abs(histPoint.inputdate.getTime() - mouseX.getTime());
                    const forecastDist = Math.abs(forecastPoint.inputdate.getTime() - mouseX.getTime());
                    
                    if (histDist < forecastDist) {
                        tooltipContent = `Historical Data:<br/>
                            Date: ${histPoint.inputdate.toLocaleDateString()}<br/>
                            Value: ${histPoint.diff.toFixed(4)}`;
                    } else {
                        tooltipContent = `Forecast:<br/>
                            Date: ${forecastPoint.inputdate.toLocaleDateString()}<br/>
                            Value: ${forecastPoint.diff.toFixed(4)}<br/>
                            Upper Bound: ${upperPoint.diff.toFixed(4)}<br/>
                            Lower Bound: ${lowerPoint.diff.toFixed(4)}`;
                    }
                } else if (histPoint) {
                    tooltipContent = `Historical Data:<br/>
                        Date: ${histPoint.inputdate.toLocaleDateString()}<br/>
                        Value: ${histPoint.diff.toFixed(4)}`;
                } else if (forecastPoint) {
                    tooltipContent = `Forecast:<br/>
                        Date: ${forecastPoint.inputdate.toLocaleDateString()}<br/>
                        Value: ${forecastPoint.diff.toFixed(4)}<br/>
                        Upper Bound: ${upperPoint.diff.toFixed(4)}<br/>
                        Lower Bound: ${lowerPoint.diff.toFixed(4)}`;
                }

                if (tooltipContent) {
                    const tooltip = d3.select("#tooltip");
                    tooltip
                        .style("opacity", 1)
                        .style("left", (event.pageX + 10) + "px")
                        .style("top", (event.pageY - 10) + "px")
                        .html(tooltipContent);
                }
            })
            .on("mouseout", hideTooltip);
    }

    private renderNonStationaryChart(
        g: d3.Selection<SVGGElement, unknown, null, undefined>,
        xScale: d3.ScaleTime<number, number>,
        yScale: d3.ScaleLinear<number, number>,
        lineGen: d3.Line<DiffPoint>,
        showTooltip: (event: MouseEvent, d: DiffPoint) => void,
        hideTooltip: () => void,
        bisectDate: (arr: DiffPoint[], x: Date) => number,
        innerWidth: number,
        innerHeight: number
    ) {
        // Draw historical data line
        g.append("path")
            .datum(this.diffSeries)
            .attr("fill", "none")
            .attr("stroke", "#00818F")
            .attr("stroke-width", 2)
            .style("stroke-dasharray", "0")
            .attr("d", lineGen);

        // Add status text
        g.append("text")
            .attr("x", innerWidth - 10)
            .attr("y", -10)
            .attr("text-anchor", "end")
            .style("fill", "red")
            .style("font-size", "12px")
            .text("ADF failed: Series non-stationary. OU not applied.");

        // Add tooltip interaction overlay
        g.append("rect")
            .attr("width", innerWidth)
            .attr("height", innerHeight)
            .style("fill", "none")
            .style("pointer-events", "all")
            .on("mousemove", (event) => {
                const mouseX = xScale.invert(d3.pointer(event)[0]);
                const index = bisectDate(this.diffSeries, mouseX);
                const d = this.diffSeries[index];
                if (d) showTooltip(event, d);
            })
            .on("mouseout", hideTooltip);
    }

    private addAxes(
        g: d3.Selection<SVGGElement, unknown, null, undefined>,
        xScale: d3.ScaleTime<number, number>,
        yScale: d3.ScaleLinear<number, number>,
        innerWidth: number,
        innerHeight: number
    ) {
        // Create x-axis
        const tickCount = Math.max(2, Math.floor(innerWidth / 100));
        const xAxis = d3.axisBottom(xScale)
            .ticks(tickCount)
            .tickFormat(d3.timeFormat("%b %d, %Y"));
            
        const xAxisGroup = g.append("g")
            .attr("transform", `translate(0, ${innerHeight})`)
            .call(xAxis);

        // Style x-axis
        xAxisGroup.selectAll("text")
            .attr("transform", "rotate(-20)")
            .style("text-anchor", "end")
            .style("font-size", "10px")
            .style("fill", "#000")
            .attr("dy", "1em")
            .attr("dx", "-0.5em");

        xAxisGroup.selectAll("line")
            .style("stroke", "#000")
            .style("stroke-width", "1px");

        xAxisGroup.selectAll("path")
            .style("stroke", "#000")
            .style("stroke-width", "1px");

        // Create and style y-axis
        const yAxisGroup = g.append("g")
            .call(d3.axisLeft(yScale));

        yAxisGroup.selectAll("text")
            .style("font-size", "12px")
            .style("fill", "#000");

        yAxisGroup.selectAll("line")
            .style("stroke", "#000")
            .style("stroke-width", "1px");

        yAxisGroup.selectAll("path")
            .style("stroke", "#000")
            .style("stroke-width", "1px");
    }
}
